{"version":3,"file":"index.js","sources":["../../src/client/composables/useDocSearchHotkeyListener.ts","../../src/client/composables/useDocSearchSlim.ts","../../src/client/helpers/docsearch.ts","../../src/client/utils/getFacetFilters.ts","../../src/client/utils/getSearchButtonTemplate.ts","../../src/client/utils/pollToOpenDocSearch.ts","../../src/client/utils/preconnectToAlgolia.ts","../../src/client/components/DocSearch.ts"],"sourcesContent":["import { useEventListener } from '@vueuse/core'\n\n/**\n * Add hotkey listener, remove it after triggered\n */\nexport const useDocSearchHotkeyListener = (callback: () => void): void => {\n  useEventListener(\n    'keydown',\n    (event) => {\n      const isHotKeyBind = event.key === 'k' && (event.ctrlKey || event.metaKey)\n      const isSlashKey = event.key === '/'\n\n      if (!isSlashKey && !isHotKeyBind) {\n        return\n      }\n\n      event.preventDefault()\n      callback()\n    },\n    { once: true },\n  )\n}\n","import type { DocSearchProps } from '@docsearch/react'\nimport { debounce } from 'ts-debounce'\nimport { useRouter } from 'vuepress/client'\nimport { removeLeadingSlash, resolveRoutePathFromUrl } from 'vuepress/shared'\n\ndeclare const __DOCSEARCH_INDEX_BASE__: string\n\n/**\n * Get docsearch options to be compatible with VuePress\n */\nexport const useDocSearchShim = (): Partial<DocSearchProps> => {\n  const router = useRouter()\n\n  return {\n    // convert item url to pathname of current site\n    transformItems: (items) =>\n      items.map((item) => ({\n        ...item,\n        url: `${\n          // append current base\n          __VUEPRESS_BASE__\n        }${removeLeadingSlash(\n          // get route path\n          resolveRoutePathFromUrl(item.url, __DOCSEARCH_INDEX_BASE__),\n        )}`,\n      })),\n\n    // navigation behavior triggered by `onKeyDown` internally\n    navigator: {\n      // when pressing Enter without metaKey\n      navigate: ({ itemUrl }) => {\n        router.push(itemUrl.replace(__VUEPRESS_BASE__, '/'))\n      },\n    },\n\n    // add search debounce\n    // @ts-expect-error: Return type of search is a type parameter\n    transformSearchClient: (searchClient) => ({\n      ...searchClient,\n      search: debounce(searchClient.search, 500),\n    }),\n  }\n}\n","import type { DocSearchProps } from '@docsearch/react'\nimport { deepAssign, isFunction } from '@vuepress/helper/client'\nimport { watchImmediate } from '@vueuse/core'\nimport type { App, ComputedRef, InjectionKey, MaybeRefOrGetter, Ref } from 'vue'\nimport { computed, inject, isRef, readonly, ref } from 'vue'\nimport { useRouteLocale } from 'vuepress/client'\nimport type { DocSearchOptions } from '../../shared/index.js'\n\ndeclare const __VUEPRESS_DEV__: boolean\ndeclare const __DOCSEARCH_OPTIONS__: DocSearchOptions\n\nconst docSearchDefineOptions: Partial<DocSearchProps> = __DOCSEARCH_OPTIONS__\n\ntype DocSearchRef = Ref<\n  DocSearchProps & {\n    locales?: Record<string, DocSearchProps>\n  }\n>\n\n// @ts-expect-error: Types loop back\nconst docsearchOptions: DocSearchRef = ref(\n  docSearchDefineOptions as DocSearchProps,\n)\n\nconst docsearchSymbol: InjectionKey<Readonly<DocSearchRef>> = Symbol(\n  __VUEPRESS_DEV__ ? 'docsearch' : '',\n)\n\n/**\n * DocSearch client locale options\n *\n * DocSearch 客户端多语言选项\n */\nexport type DocSearchClientLocaleOptions = Partial<DocSearchProps>\n\n/**\n * DocSearch client options\n *\n * DocSearch 客户端选项\n */\nexport interface DocSearchClientOptions extends DocSearchClientLocaleOptions {\n  /**\n   * Locale options\n   *\n   * 多语言选项\n   */\n  locales?: Record<string, DocSearchClientLocaleOptions>\n}\n\n/**\n * Customize DocSearch options\n *\n * 自定义 DocSearch 选项\n *\n * @param options - DocSearch options, support plain object, ref or getter / DocSearch 选项，支持普通对象，Ref 或 Getter\n *\n * @example\n * ```ts\n * import { defineDocSearchConfig } from '@vuepress/plugin-docsearch/client'\n *\n * // Use plain object\n * defineDocSearchConfig({\n *   translations: {\n *     button: {\n *       buttonText: 'Search',\n *     },\n *   },\n * })\n *\n * // Use ref\n * const options = ref({\n *   translations: {\n *     button: {\n *       buttonText: 'Search',\n *     },\n *   },\n * })\n * defineDocSearchConfig(options)\n *\n * // Use getter\n * defineDocSearchConfig(() => ({\n *   translations: {\n *     button: {\n *       buttonText: isDarkMode.value ? 'Search in dark' : 'Search in light',\n *     },\n *   },\n * }))\n * ```\n */\nexport const defineDocSearchConfig = (\n  options: MaybeRefOrGetter<DocSearchClientOptions>,\n): void => {\n  if (isRef(options)) {\n    watchImmediate(\n      () => options.value,\n      (value) => {\n        docsearchOptions.value = deepAssign({}, docSearchDefineOptions, value)\n      },\n    )\n  } else if (isFunction(options)) {\n    watchImmediate(computed(options), (value) => {\n      docsearchOptions.value = deepAssign({}, docSearchDefineOptions, value)\n    })\n  } else {\n    docsearchOptions.value = deepAssign({}, docSearchDefineOptions, options)\n  }\n}\n\n/**\n * @internal\n */\nexport const useDocSearchOptions = (): ComputedRef<DocSearchProps> => {\n  const options = inject(docsearchSymbol)!\n  const routeLocale = useRouteLocale()\n\n  return computed(() => ({\n    ...options.value,\n    ...options.value.locales?.[routeLocale.value],\n  }))\n}\n\n/**\n * @internal\n */\nexport const injectDocSearchConfig = (app: App): void => {\n  // @ts-expect-error: Types loop back\n  app.provide(docsearchSymbol, readonly(docsearchOptions))\n}\n","import type { FacetFilters } from 'algoliasearch'\n\n/**\n * Get facet filters for current lang\n */\nexport const getFacetFilters = (\n  lang: string,\n  rawFacetFilters: FacetFilters = [],\n): FacetFilters => [\n  `lang:${lang}`,\n  ...((Array.isArray(rawFacetFilters)\n    ? rawFacetFilters\n    : [rawFacetFilters]) as string[]),\n]\n","import type { DocSearchProps } from '@docsearch/react'\n\ntype DocSearchTranslation = Exclude<DocSearchProps['translations'], undefined>\n\n/**\n * Get the search button template\n *\n * Use the same content as in @docsearch/js\n *\n * TODO: the meta key text should also be dynamic\n */\nexport const getSearchButtonTemplate = ({\n  buttonText = 'Search',\n  buttonAriaLabel = buttonText,\n}: DocSearchTranslation['button'] = {}): string =>\n  `<button type=\"button\" class=\"DocSearch DocSearch-Button\" aria-label=\"${buttonAriaLabel}\"><span class=\"DocSearch-Button-Container\"><svg width=\"20\" height=\"20\" class=\"DocSearch-Search-Icon\" viewBox=\"0 0 20 20\"><path d=\"M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z\" stroke=\"currentColor\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg><span class=\"DocSearch-Button-Placeholder\">${buttonText}</span></span><span class=\"DocSearch-Button-Keys\"><kbd class=\"DocSearch-Button-Key\"><svg width=\"15\" height=\"15\" class=\"DocSearch-Control-Key-Icon\"><path d=\"M4.505 4.496h2M5.505 5.496v5M8.216 4.496l.055 5.993M10 7.5c.333.333.5.667.5 1v2M12.326 4.5v5.996M8.384 4.496c1.674 0 2.116 0 2.116 1.5s-.442 1.5-2.116 1.5M3.205 9.303c-.09.448-.277 1.21-1.241 1.203C1 10.5.5 9.513.5 8V7c0-1.57.5-2.5 1.464-2.494.964.006 1.134.598 1.24 1.342M12.553 10.5h1.953\" stroke-width=\"1.2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"square\"></path></svg></kbd><kbd class=\"DocSearch-Button-Key\">K</kbd></span></button>`\n","const POLL_INTERVAL = 16\n\n/**\n * Programmatically open the docsearch modal\n */\nexport const pollToOpenDocSearch = (): void => {\n  if (document.querySelector('.DocSearch-Modal')) return\n  const e = new Event('keydown') as {\n    -readonly [P in keyof KeyboardEvent]: KeyboardEvent[P]\n  }\n  e.key = 'k'\n  e.metaKey = true\n  window.dispatchEvent(e)\n  setTimeout(pollToOpenDocSearch, POLL_INTERVAL)\n}\n","/**\n * Preconnect to Algolia's API\n */\nexport const preconnectToAlgolia = (appId: string): void => {\n  const id = 'algolia-preconnect'\n  const rIC =\n    'requestIdleCallback' in window ? window.requestIdleCallback : setTimeout\n\n  rIC(() => {\n    if (document.head.querySelector(`#${id}`)) return\n    const preconnect = document.createElement('link')\n    preconnect.id = id\n    preconnect.rel = 'preconnect'\n    preconnect.href = `https://${appId}-dsn.algolia.net`\n    preconnect.crossOrigin = ''\n    document.head.appendChild(preconnect)\n  })\n}\n","import type { SearchParamsObject } from 'algoliasearch'\nimport type { PropType } from 'vue'\nimport { computed, defineComponent, h, onMounted, ref, watch } from 'vue'\nimport { useLang, useRouteLocale } from 'vuepress/client'\nimport type { DocSearchOptions } from '../../shared/index.js'\nimport {\n  useDocSearchHotkeyListener,\n  useDocSearchShim,\n} from '../composables/index.js'\nimport { useDocSearchOptions } from '../helpers/index.js'\nimport {\n  getFacetFilters,\n  getSearchButtonTemplate,\n  pollToOpenDocSearch,\n  preconnectToAlgolia,\n} from '../utils/index.js'\n\nexport const DocSearch = defineComponent({\n  name: 'DocSearch',\n\n  props: {\n    containerId: {\n      type: String,\n      default: 'docsearch-container',\n    },\n    options: {\n      type: Object as PropType<DocSearchOptions>,\n      default: () => ({}),\n    },\n  },\n\n  setup(props) {\n    const docSearchOptions = useDocSearchOptions()\n    const docsearchShim = useDocSearchShim()\n    const lang = useLang()\n    const routeLocale = useRouteLocale()\n\n    const hasInitialized = ref(false)\n    const hasTriggered = ref(false)\n\n    // resolve docsearch options for current locale\n    const options = computed(() => {\n      const { locales = {}, ...rest } = props.options\n\n      return {\n        ...docSearchOptions.value,\n        ...rest,\n        ...locales[routeLocale.value],\n      }\n    })\n\n    /**\n     * Import docsearch js and initialize\n     */\n    const initialize = async (): Promise<void> => {\n      if (__VUEPRESS_SSR__) return\n\n      const { default: docsearch } = await import('@docsearch/js')\n\n      const { searchParameters } = options.value\n\n      docsearch({\n        ...docsearchShim,\n        ...options.value,\n        container: `#${props.containerId}`,\n        searchParameters: {\n          ...searchParameters,\n          facetFilters: getFacetFilters(\n            lang.value,\n            (searchParameters as SearchParamsObject | undefined)?.facetFilters,\n          ),\n        },\n      })\n      // mark as initialized\n      hasInitialized.value = true\n    }\n\n    /**\n     * Trigger docsearch initialization and open it\n     */\n    const trigger = (): void => {\n      if (hasTriggered.value || hasInitialized.value) return\n      // mark as triggered\n      hasTriggered.value = true\n      // initialize and open\n      void initialize()\n      pollToOpenDocSearch()\n      // re-initialize when route locale changes\n      watch(routeLocale, initialize)\n    }\n\n    // trigger when hotkey is pressed\n    useDocSearchHotkeyListener(trigger)\n\n    // preconnect to algolia\n    onMounted(() => {\n      preconnectToAlgolia(options.value.appId)\n    })\n\n    return () => [\n      h('div', {\n        id: props.containerId,\n        style: { display: hasInitialized.value ? 'block' : 'none' },\n      }),\n      hasInitialized.value\n        ? null\n        : h('div', {\n            onClick: trigger,\n            innerHTML: getSearchButtonTemplate(\n              options.value.translations?.button,\n            ),\n          }),\n    ]\n  },\n})\n"],"names":["useDocSearchHotkeyListener","callback","useEventListener","event","isHotKeyBind","useDocSearchShim","router","useRouter","items","item","removeLeadingSlash","resolveRoutePathFromUrl","itemUrl","searchClient","debounce","docSearchDefineOptions","docsearchOptions","ref","docsearchSymbol","defineDocSearchConfig","options","isRef","watchImmediate","value","deepAssign","isFunction","computed","useDocSearchOptions","inject","routeLocale","useRouteLocale","injectDocSearchConfig","app","readonly","getFacetFilters","lang","rawFacetFilters","getSearchButtonTemplate","buttonText","buttonAriaLabel","pollToOpenDocSearch","preconnectToAlgolia","appId","id","preconnect","DocSearch","defineComponent","props","docSearchOptions","docsearchShim","useLang","hasInitialized","hasTriggered","locales","rest","initialize","docsearch","searchParameters","trigger","watch","onMounted","h"],"mappings":"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"}